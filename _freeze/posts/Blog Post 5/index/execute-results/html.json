{
  "hash": "c95c81105082011898adbfc1a96404a4",
  "result": {
    "markdown": "---\ntitle: Anomaly/Outlier Detection\nauthor: Rithvik Guntor\ndate: 2023-11-1\ncategories:\n  - code\n  - analysis\n---\n\n**Isolation Forest**\n\nAnomaly and outlier detection is a statistical technique used to identify data points that deviate significantly from the rest of a given dataset. Outliers can provide useful insights like potential errors and unique patterns. One particular anomaly detection method is the Isolation Forest method. Isolation Forest is a powerful anomaly detection method that operates by isolating outliers in a dataset. Unlike traditional methods, it utilizes a randomized and hierarchical approach, making it especially effective in identifying anomalies. \n\nIn the context of breast cancer detection, Isolation Forest can be applied to identify unusual or suspicious patterns within medical imaging data or specific characteristics related to tumors themselves. The code below performs a study that attempts to identify tumor radius and texture means outliers using the Isolation Forest method for a breast cancer dataset.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import necessary libraries\nimport pandas as pd\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.preprocessing import LabelEncoder\nimport matplotlib.pyplot as plt\nimport numpy as np\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Load the dataset\ndata = pd.read_csv('data.csv')\ndata.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>diagnosis</th>\n      <th>radius_mean</th>\n      <th>texture_mean</th>\n      <th>perimeter_mean</th>\n      <th>area_mean</th>\n      <th>smoothness_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave_points_mean</th>\n      <th>...</th>\n      <th>radius_worst</th>\n      <th>texture_worst</th>\n      <th>perimeter_worst</th>\n      <th>area_worst</th>\n      <th>smoothness_worst</th>\n      <th>compactness_worst</th>\n      <th>concavity_worst</th>\n      <th>concave_points_worst</th>\n      <th>symmetry_worst</th>\n      <th>fractal_dimension_worst</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>842302</td>\n      <td>M</td>\n      <td>17.99</td>\n      <td>10.38</td>\n      <td>122.80</td>\n      <td>1001.0</td>\n      <td>0.11840</td>\n      <td>0.27760</td>\n      <td>0.3001</td>\n      <td>0.14710</td>\n      <td>...</td>\n      <td>25.38</td>\n      <td>17.33</td>\n      <td>184.60</td>\n      <td>2019.0</td>\n      <td>0.1622</td>\n      <td>0.6656</td>\n      <td>0.7119</td>\n      <td>0.2654</td>\n      <td>0.4601</td>\n      <td>0.11890</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>842517</td>\n      <td>M</td>\n      <td>20.57</td>\n      <td>17.77</td>\n      <td>132.90</td>\n      <td>1326.0</td>\n      <td>0.08474</td>\n      <td>0.07864</td>\n      <td>0.0869</td>\n      <td>0.07017</td>\n      <td>...</td>\n      <td>24.99</td>\n      <td>23.41</td>\n      <td>158.80</td>\n      <td>1956.0</td>\n      <td>0.1238</td>\n      <td>0.1866</td>\n      <td>0.2416</td>\n      <td>0.1860</td>\n      <td>0.2750</td>\n      <td>0.08902</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>84300903</td>\n      <td>M</td>\n      <td>19.69</td>\n      <td>21.25</td>\n      <td>130.00</td>\n      <td>1203.0</td>\n      <td>0.10960</td>\n      <td>0.15990</td>\n      <td>0.1974</td>\n      <td>0.12790</td>\n      <td>...</td>\n      <td>23.57</td>\n      <td>25.53</td>\n      <td>152.50</td>\n      <td>1709.0</td>\n      <td>0.1444</td>\n      <td>0.4245</td>\n      <td>0.4504</td>\n      <td>0.2430</td>\n      <td>0.3613</td>\n      <td>0.08758</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>84348301</td>\n      <td>M</td>\n      <td>11.42</td>\n      <td>20.38</td>\n      <td>77.58</td>\n      <td>386.1</td>\n      <td>0.14250</td>\n      <td>0.28390</td>\n      <td>0.2414</td>\n      <td>0.10520</td>\n      <td>...</td>\n      <td>14.91</td>\n      <td>26.50</td>\n      <td>98.87</td>\n      <td>567.7</td>\n      <td>0.2098</td>\n      <td>0.8663</td>\n      <td>0.6869</td>\n      <td>0.2575</td>\n      <td>0.6638</td>\n      <td>0.17300</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>84358402</td>\n      <td>M</td>\n      <td>20.29</td>\n      <td>14.34</td>\n      <td>135.10</td>\n      <td>1297.0</td>\n      <td>0.10030</td>\n      <td>0.13280</td>\n      <td>0.1980</td>\n      <td>0.10430</td>\n      <td>...</td>\n      <td>22.54</td>\n      <td>16.67</td>\n      <td>152.20</td>\n      <td>1575.0</td>\n      <td>0.1374</td>\n      <td>0.2050</td>\n      <td>0.4000</td>\n      <td>0.1625</td>\n      <td>0.2364</td>\n      <td>0.07678</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 32 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Encode the 'diagnosis' column from categorical (Malignant or Benign) to numeric (1 or 0)\nlabel_encoder = LabelEncoder()\ndata['diagnosis'] = label_encoder.fit_transform(data['diagnosis'])\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Define the feature columns (exclude the 'diagnosis' column)\nfeature_columns = ['radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean']\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Create a DataFrame with only the feature columns\nX = data[feature_columns]\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Initialize the Isolation Forest model\nisolation_forest = IsolationForest(contamination=0.05)\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Fit the model on the data\nisolation_forest.fit(X)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/rithvikguntor/opt/anaconda3/lib/python3.9/site-packages/sklearn/base.py:450: UserWarning:\n\nX does not have valid feature names, but IsolationForest was fitted with feature names\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nIsolationForest(contamination=0.05)\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Predict outliers using the trained model\noutliers = isolation_forest.predict(X)\noutliers\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\narray([-1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,\n        1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        1,  1, -1,  1,  1,  1, -1, -1])\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Create a new column in the original DataFrame to label the outliers\ndata['is_outlier'] = outliers\n```\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Filter the data to get the outliers, -1 indicates an outlier\noutlier_data = data[data['is_outlier'] == -1]\n```\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Visualize the data and outliers\nplt.figure(figsize=(12, 8))\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n<Figure size 1152x768 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 1152x768 with 0 Axes>\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Scatter plot of feature columns\nplt.scatter(data['radius_mean'], data['texture_mean'], label='Data Points', c='b', alpha=0.5)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n<matplotlib.collections.PathCollection at 0x7fdf2001cd30>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-2.png){width=566 height=411}\n:::\n:::\n\n\nAfter fitting the Isolation Forest model and identifying outliers, we create a scatter plot of the feature columns, marking the data points in blue and the outliers in red with an 'x' marker. The scatter plot helps visualize the outliers in the context of the feature space, making it easier to understand their distribution.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Mark the outliers in red\nplt.scatter(outlier_data['radius_mean'], outlier_data['texture_mean'], label='Outliers', c='r', marker='x', s=100)\n\nplt.xlabel('Radius Mean')\nplt.ylabel('Texture Mean')\nplt.title('Isolation Forest Outlier Detection')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=597 height=449}\n:::\n:::\n\n\nAfter plotting the data, we can take a closer look at the list of outliers. \n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Print the outliers\nprint(\"Outliers:\")\nprint(outlier_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOutliers:\n            id  diagnosis  radius_mean  texture_mean  perimeter_mean  \\\n0       842302          1       17.990         10.38          122.80   \n3     84348301          1       11.420         20.38           77.58   \n78     8610862          1       20.180         23.97          143.70   \n82     8611555          1       25.220         24.91          171.50   \n101     862722          0        6.981         13.43           43.79   \n108      86355          1       22.270         19.67          152.80   \n112      86409          0       14.260         19.65           97.83   \n122     865423          1       24.250         20.20          166.20   \n152    8710441          0        9.731         15.34           63.78   \n164    8712289          1       23.270         22.04          152.10   \n180     873592          1       27.220         21.87          182.10   \n181     873593          1       21.090         26.57          142.70   \n202     878796          1       23.290         26.67          158.90   \n212    8810703          1       28.110         18.47          188.50   \n236   88299702          1       23.210         26.97          153.50   \n257     886776          1       15.320         17.27          103.20   \n258     887181          1       15.660         23.20          110.20   \n339      89812          1       23.510         24.27          155.10   \n352     899987          1       25.730         17.46          174.20   \n400   90439701          1       17.910         21.02          124.40   \n461  911296202          1       27.420         26.27          186.90   \n503     915143          1       23.090         19.83          152.10   \n504     915186          0        9.268         12.87           61.49   \n521   91762702          1       24.630         21.60          165.50   \n538     921092          0        7.729         25.49           47.98   \n539     921362          0        7.691         25.44           48.34   \n563     926125          1       20.920         25.09          143.00   \n567     927241          1       20.600         29.33          140.10   \n568      92751          0        7.760         24.54           47.92   \n\n     area_mean  smoothness_mean  compactness_mean  concavity_mean  \\\n0       1001.0          0.11840           0.27760         0.30010   \n3        386.1          0.14250           0.28390         0.24140   \n78      1245.0          0.12860           0.34540         0.37540   \n82      1878.0          0.10630           0.26650         0.33390   \n101      143.5          0.11700           0.07568         0.00000   \n108     1509.0          0.13260           0.27680         0.42640   \n112      629.9          0.07837           0.22330         0.30030   \n122     1761.0          0.14470           0.28670         0.42680   \n152      300.2          0.10720           0.15990         0.41080   \n164     1686.0          0.08439           0.11450         0.13240   \n180     2250.0          0.10940           0.19140         0.28710   \n181     1311.0          0.11410           0.28320         0.24870   \n202     1685.0          0.11410           0.20840         0.35230   \n212     2499.0          0.11420           0.15160         0.32010   \n236     1670.0          0.09509           0.16820         0.19500   \n257      713.3          0.13350           0.22840         0.24480   \n258      773.5          0.11090           0.31140         0.31760   \n339     1747.0          0.10690           0.12830         0.23080   \n352     2010.0          0.11490           0.23630         0.33680   \n400      994.0          0.12300           0.25760         0.31890   \n461     2501.0          0.10840           0.19880         0.36350   \n503     1682.0          0.09342           0.12750         0.16760   \n504      248.7          0.16340           0.22390         0.09730   \n521     1841.0          0.10300           0.21060         0.23100   \n538      178.8          0.08098           0.04878         0.00000   \n539      170.4          0.08668           0.11990         0.09252   \n563     1347.0          0.10990           0.22360         0.31740   \n567     1265.0          0.11780           0.27700         0.35140   \n568      181.0          0.05263           0.04362         0.00000   \n\n     concave_points_mean  ...  texture_worst  perimeter_worst  area_worst  \\\n0                0.14710  ...          17.33           184.60      2019.0   \n3                0.10520  ...          26.50            98.87       567.7   \n78               0.16040  ...          31.72           170.30      1623.0   \n82               0.18450  ...          33.62           211.70      2562.0   \n101              0.00000  ...          19.54            50.41       185.2   \n108              0.18230  ...          28.01           206.80      2360.0   \n112              0.07798  ...          23.73           107.00       709.0   \n122              0.20120  ...          23.99           180.90      2073.0   \n152              0.07857  ...          19.49            71.04       380.5   \n164              0.09702  ...          28.22           184.20      2403.0   \n180              0.18780  ...          32.85           220.80      3216.0   \n181              0.14960  ...          33.48           176.50      2089.0   \n202              0.16200  ...          32.68           177.00      1986.0   \n212              0.15950  ...          18.47           188.50      2499.0   \n236              0.12370  ...          34.51           206.00      2944.0   \n257              0.12420  ...          22.66           119.80       928.8   \n258              0.13770  ...          31.64           143.70      1226.0   \n339              0.14100  ...          30.73           202.40      2906.0   \n352              0.19130  ...          23.58           229.30      3234.0   \n400              0.11980  ...          27.78           149.60      1304.0   \n461              0.16890  ...          31.37           251.20      4254.0   \n503              0.10030  ...          23.87           211.50      2782.0   \n504              0.05252  ...          16.38            69.05       300.2   \n521              0.14710  ...          26.93           205.70      2642.0   \n538              0.00000  ...          30.92            57.17       248.0   \n539              0.01364  ...          31.89            54.49       223.6   \n563              0.14740  ...          29.41           179.10      1819.0   \n567              0.15200  ...          39.42           184.60      1821.0   \n568              0.00000  ...          30.37            59.16       268.6   \n\n     smoothness_worst  compactness_worst  concavity_worst  \\\n0             0.16220            0.66560           0.7119   \n3             0.20980            0.86630           0.6869   \n78            0.16390            0.61640           0.7681   \n82            0.15730            0.60760           0.6476   \n101           0.15840            0.12020           0.0000   \n108           0.17010            0.69970           0.9608   \n112           0.08949            0.41930           0.6783   \n122           0.16960            0.42440           0.5803   \n152           0.12920            0.27720           0.8216   \n164           0.12280            0.35830           0.3948   \n180           0.14720            0.40340           0.5340   \n181           0.14910            0.75840           0.6780   \n202           0.15360            0.41670           0.7892   \n212           0.11420            0.15160           0.3201   \n236           0.14810            0.41260           0.5820   \n257           0.17650            0.45030           0.4429   \n258           0.15040            0.51720           0.6181   \n339           0.15150            0.26780           0.4819   \n352           0.15300            0.59370           0.6451   \n400           0.18730            0.59170           0.9034   \n461           0.13570            0.42560           0.6833   \n503           0.11990            0.36250           0.3794   \n504           0.19020            0.34410           0.2099   \n521           0.13420            0.41880           0.4658   \n538           0.12560            0.08340           0.0000   \n539           0.15960            0.30640           0.3393   \n563           0.14070            0.41860           0.6599   \n567           0.16500            0.86810           0.9387   \n568           0.08996            0.06444           0.0000   \n\n     concave_points_worst  symmetry_worst  fractal_dimension_worst  is_outlier  \n0                  0.2654          0.4601                  0.11890          -1  \n3                  0.2575          0.6638                  0.17300          -1  \n78                 0.2508          0.5440                  0.09964          -1  \n82                 0.2867          0.2355                  0.10510          -1  \n101                0.0000          0.2932                  0.09382          -1  \n108                0.2910          0.4055                  0.09789          -1  \n112                0.1505          0.2398                  0.10820          -1  \n122                0.2248          0.3222                  0.08009          -1  \n152                0.1571          0.3108                  0.12590          -1  \n164                0.2346          0.3589                  0.09187          -1  \n180                0.2688          0.2856                  0.08082          -1  \n181                0.2903          0.4098                  0.12840          -1  \n202                0.2733          0.3198                  0.08762          -1  \n212                0.1595          0.1648                  0.05525          -1  \n236                0.2593          0.3103                  0.08677          -1  \n257                0.2229          0.3258                  0.11910          -1  \n258                0.2462          0.3277                  0.10190          -1  \n339                0.2089          0.2593                  0.07738          -1  \n352                0.2756          0.3690                  0.08815          -1  \n400                0.1964          0.3245                  0.11980          -1  \n461                0.2625          0.2641                  0.07427          -1  \n503                0.2264          0.2908                  0.07277          -1  \n504                0.1025          0.3038                  0.12520          -1  \n521                0.2475          0.3157                  0.09671          -1  \n538                0.0000          0.3058                  0.09938          -1  \n539                0.0500          0.2790                  0.10660          -1  \n563                0.2542          0.2929                  0.09873          -1  \n567                0.2650          0.4087                  0.12400          -1  \n568                0.0000          0.2871                  0.07039          -1  \n\n[29 rows x 33 columns]\n```\n:::\n:::\n\n\nThe above code displays the outliers in the plot as well as the individual outlier data points outputted as a list. In the study, we looked at the radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean', 'smoothness_mean', 'compactness_mean', and 'concavity_mean' features. The Isolation Forest method used this subset of features in our data to identify outliers in the context of the texture_mean and radius_mean variables, as seen in the graph. \n\nBy efficiently isolating and identifying outliers within our dataset, this method has enabled us to extract valuable insights and uncover unusual patterns that may have otherwise remained hidden from us. The Isolation Forest's capability to handle high-dimensional data, scalability, and ease of implementation make it a valuable asset in outlier and anomaly detection.\n\n**Gaussian Mixture Method**\n\nAlong with the Isolation Forest method, there is another anomaly/outlier detection method known as the Gaussian Mixture model. We use the Gaussian Mixture Model (GMM) to fit the data and calculate Mahalanobis distances for each data point. Then, a threshold for anomaly detection is set based on the Mahalanobis distances. The threshold can be adjusted as needed. Data points are then labeled as an outlier or not depending on the comparison of their value to the threshold. The code below uses GMM to identify outliers based on Mahalanobis distances, which can be a powerful approach for anomaly detection. Adjust the number of components and threshold according to your specific dataset and requirements.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Performs outlier/anomaly detection using Gaussian Mixture Model\n# Initialize the Gaussian Mixture Model with a specified number of components (clusters) - We use 2 components to separate Malignant and Benign classes\nn_components = 2  \ngmm = GaussianMixture(n_components=n_components)\n```\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Fit the model on the data\ngmm.fit(X)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nGaussianMixture(n_components=2)\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# Calculate the Mahalanobis distances for each data point\nmahalanobis_distances = gmm.score_samples(X)\n```\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# Set a threshold for anomaly detection (you can adjust this threshold)\nthreshold = np.percentile(mahalanobis_distances, 5)\n```\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Identify outliers based on the threshold\noutliers = mahalanobis_distances < threshold\n```\n:::\n\n\nWe identify outliers based on the threshold and create a new column 'is_outlier' in the original DataFrame to label the outliers.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# Create a new column in the original DataFrame to label the outliers\ndata['is_outlier'] = outliers\n```\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# Filter the data to get the outliers\noutlier_data = data[data['is_outlier']]\n```\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# Visualize the data and outliers\nplt.figure(figsize=(12, 8))\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n<Figure size 1152x768 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 1152x768 with 0 Axes>\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# Scatter plot of feature columns\nplt.scatter(data['radius_mean'], data['texture_mean'], label='Data Points', c='b', alpha=0.5)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n<matplotlib.collections.PathCollection at 0x7fdf195b7c40>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-2.png){width=566 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# Mark the outliers in red\nplt.scatter(outlier_data['radius_mean'], outlier_data['texture_mean'], label='Outliers', c='r', marker='x', s=100)\n\nplt.xlabel('Radius Mean')\nplt.ylabel('Texture Mean')\nplt.title('Gaussian Mixture Model Outlier Detection')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-25-output-1.png){width=585 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# Print the outliers\nprint(\"Outliers:\")\nprint(outlier_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOutliers:\n            id  diagnosis  radius_mean  texture_mean  perimeter_mean  \\\n0       842302          1       17.990         10.38          122.80   \n3     84348301          1       11.420         20.38           77.58   \n12      846226          1       19.170         24.80          132.40   \n68      859471          0        9.029         17.33           58.79   \n78     8610862          1       20.180         23.97          143.70   \n83     8611792          1       19.100         26.29          129.10   \n87    86135502          1       19.020         24.59          122.00   \n101     862722          0        6.981         13.43           43.79   \n108      86355          1       22.270         19.67          152.80   \n112      86409          0       14.260         19.65           97.83   \n122     865423          1       24.250         20.20          166.20   \n152    8710441          0        9.731         15.34           63.78   \n180     873592          1       27.220         21.87          182.10   \n181     873593          1       21.090         26.57          142.70   \n190     874858          1       14.220         23.12           94.37   \n202     878796          1       23.290         26.67          158.90   \n212    8810703          1       28.110         18.47          188.50   \n239   88330202          1       17.460         39.28          113.40   \n256   88649001          1       19.550         28.77          133.60   \n258     887181          1       15.660         23.20          110.20   \n318     894329          0        9.042         18.90           60.07   \n379    9013838          1       11.080         18.83           73.30   \n430     907914          1       14.900         22.53          102.10   \n461  911296202          1       27.420         26.27          186.90   \n504     915186          0        9.268         12.87           61.49   \n505     915276          0        9.676         13.14           64.12   \n538     921092          0        7.729         25.49           47.98   \n539     921362          0        7.691         25.44           48.34   \n568      92751          0        7.760         24.54           47.92   \n\n     area_mean  smoothness_mean  compactness_mean  concavity_mean  \\\n0       1001.0          0.11840           0.27760         0.30010   \n3        386.1          0.14250           0.28390         0.24140   \n12      1123.0          0.09740           0.24580         0.20650   \n68       250.5          0.10660           0.14130         0.31300   \n78      1245.0          0.12860           0.34540         0.37540   \n83      1132.0          0.12150           0.17910         0.19370   \n87      1076.0          0.09029           0.12060         0.14680   \n101      143.5          0.11700           0.07568         0.00000   \n108     1509.0          0.13260           0.27680         0.42640   \n112      629.9          0.07837           0.22330         0.30030   \n122     1761.0          0.14470           0.28670         0.42680   \n152      300.2          0.10720           0.15990         0.41080   \n180     2250.0          0.10940           0.19140         0.28710   \n181     1311.0          0.11410           0.28320         0.24870   \n190      609.9          0.10750           0.24130         0.19810   \n202     1685.0          0.11410           0.20840         0.35230   \n212     2499.0          0.11420           0.15160         0.32010   \n239      920.6          0.09812           0.12980         0.14170   \n256     1207.0          0.09260           0.20630         0.17840   \n258      773.5          0.11090           0.31140         0.31760   \n318      244.5          0.09968           0.19720         0.19750   \n379      361.6          0.12160           0.21540         0.16890   \n430      685.0          0.09947           0.22250         0.27330   \n461     2501.0          0.10840           0.19880         0.36350   \n504      248.7          0.16340           0.22390         0.09730   \n505      272.5          0.12550           0.22040         0.11880   \n538      178.8          0.08098           0.04878         0.00000   \n539      170.4          0.08668           0.11990         0.09252   \n568      181.0          0.05263           0.04362         0.00000   \n\n     concave_points_mean  ...  texture_worst  perimeter_worst  area_worst  \\\n0                0.14710  ...          17.33           184.60      2019.0   \n3                0.10520  ...          26.50            98.87       567.7   \n12               0.11180  ...          29.94           151.70      1332.0   \n68               0.04375  ...          22.65            65.50       324.7   \n78               0.16040  ...          31.72           170.30      1623.0   \n83               0.14690  ...          32.72           141.30      1298.0   \n87               0.08271  ...          30.41           152.90      1623.0   \n101              0.00000  ...          19.54            50.41       185.2   \n108              0.18230  ...          28.01           206.80      2360.0   \n112              0.07798  ...          23.73           107.00       709.0   \n122              0.20120  ...          23.99           180.90      2073.0   \n152              0.07857  ...          19.49            71.04       380.5   \n180              0.18780  ...          32.85           220.80      3216.0   \n181              0.14960  ...          33.48           176.50      2089.0   \n190              0.06618  ...          37.18           106.40       762.4   \n202              0.16200  ...          32.68           177.00      1986.0   \n212              0.15950  ...          18.47           188.50      2499.0   \n239              0.08811  ...          44.87           141.20      1408.0   \n256              0.11440  ...          36.27           178.60      1926.0   \n258              0.13770  ...          31.64           143.70      1226.0   \n318              0.04908  ...          23.40            68.62       297.1   \n379              0.06367  ...          32.82            91.76       508.1   \n430              0.09711  ...          27.57           125.40       832.7   \n461              0.16890  ...          31.37           251.20      4254.0   \n504              0.05252  ...          16.38            69.05       300.2   \n505              0.07038  ...          18.04            69.47       328.1   \n538              0.00000  ...          30.92            57.17       248.0   \n539              0.01364  ...          31.89            54.49       223.6   \n568              0.00000  ...          30.37            59.16       268.6   \n\n     smoothness_worst  compactness_worst  concavity_worst  \\\n0             0.16220            0.66560           0.7119   \n3             0.20980            0.86630           0.6869   \n12            0.10370            0.39030           0.3639   \n68            0.14820            0.43650           1.2520   \n78            0.16390            0.61640           0.7681   \n83            0.13920            0.28170           0.2432   \n87            0.12490            0.32060           0.5755   \n101           0.15840            0.12020           0.0000   \n108           0.17010            0.69970           0.9608   \n112           0.08949            0.41930           0.6783   \n122           0.16960            0.42440           0.5803   \n152           0.12920            0.27720           0.8216   \n180           0.14720            0.40340           0.5340   \n181           0.14910            0.75840           0.6780   \n190           0.15330            0.93270           0.8488   \n202           0.15360            0.41670           0.7892   \n212           0.11420            0.15160           0.3201   \n239           0.13650            0.37350           0.3241   \n256           0.12810            0.53290           0.4251   \n258           0.15040            0.51720           0.6181   \n318           0.12210            0.37480           0.4609   \n379           0.21840            0.93790           0.8402   \n430           0.14190            0.70900           0.9019   \n461           0.13570            0.42560           0.6833   \n504           0.19020            0.34410           0.2099   \n505           0.20060            0.36630           0.2913   \n538           0.12560            0.08340           0.0000   \n539           0.15960            0.30640           0.3393   \n568           0.08996            0.06444           0.0000   \n\n     concave_points_worst  symmetry_worst  fractal_dimension_worst  is_outlier  \n0                  0.2654          0.4601                  0.11890        True  \n3                  0.2575          0.6638                  0.17300        True  \n12                 0.1767          0.3176                  0.10230        True  \n68                 0.1750          0.4228                  0.11750        True  \n78                 0.2508          0.5440                  0.09964        True  \n83                 0.1841          0.2311                  0.09203        True  \n87                 0.1956          0.3956                  0.09288        True  \n101                0.0000          0.2932                  0.09382        True  \n108                0.2910          0.4055                  0.09789        True  \n112                0.1505          0.2398                  0.10820        True  \n122                0.2248          0.3222                  0.08009        True  \n152                0.1571          0.3108                  0.12590        True  \n180                0.2688          0.2856                  0.08082        True  \n181                0.2903          0.4098                  0.12840        True  \n190                0.1772          0.5166                  0.14460        True  \n202                0.2733          0.3198                  0.08762        True  \n212                0.1595          0.1648                  0.05525        True  \n239                0.2066          0.2853                  0.08496        True  \n256                0.1941          0.2818                  0.10050        True  \n258                0.2462          0.3277                  0.10190        True  \n318                0.1145          0.3135                  0.10550        True  \n379                0.2524          0.4154                  0.14030        True  \n430                0.2475          0.2866                  0.11550        True  \n461                0.2625          0.2641                  0.07427        True  \n504                0.1025          0.3038                  0.12520        True  \n505                0.1075          0.2848                  0.13640        True  \n538                0.0000          0.3058                  0.09938        True  \n539                0.0500          0.2790                  0.10660        True  \n568                0.0000          0.2871                  0.07039        True  \n\n[29 rows x 33 columns]\n```\n:::\n:::\n\n\nThe code above shows the outliers in the graph marked with an 'X'. It can be seen that there are various similarities between the results from this graph as well as that from the Isolation Forest approach. There are various differences as well in the outlier results, and this is most likely a result of the differences in the outlier calculation approaches. Despite the differences in both approaches, the visualizations appear to display fairly accurate representations of the outlier data in both cases. Both approaches are powerful outlier detection techniques, and the choice between these methods is dependent on the structure of the data being worked with. \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}